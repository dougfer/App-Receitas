{"ast":null,"code":"var _jsxFileName = \"/home/douglas/\\xC1rea de Trabalho/Trybe/trybe-exercises/Projetos/FrontEnd/sd-08-project-recipes-app/src/context/Provider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport RecipeContext from './RecipeContext';\n\nfunction Provider({\n  children\n}) {\n  const [meals, setMeals] = useState([]);\n  const [isDrinkLoading, setIsDrinkLoading] = useState(false);\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n  const [foodCategory, setFoodCategory] = useState([]);\n  const [drinkCategory, setDrinkCategory] = useState([]);\n  const [searchType, setSearchType] = useState('ingrediente');\n  const [searchInputValue, setSearchInputValue] = useState('');\n\n  const searchBarRequestFood = async (type, inputvalue) => {\n    try {\n      let response = '';\n\n      if (type === 'ingrediente') {\n        response = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${inputvalue}`);\n      }\n\n      if (type === 'nome') {\n        response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${inputvalue}`);\n      }\n\n      if (type === 'primeira letra') {\n        if (inputvalue.length !== 1) {\n          return alert('Sua busca deve conter somente 1 (um) caracter');\n        }\n\n        response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?f=${inputvalue}`);\n      }\n\n      const responseJson = await response.json();\n      console.log(responseJson);\n\n      if (responseJson.meals === null) {\n        throw new Error('Nao existem receitas');\n      }\n\n      setMeals(responseJson.meals);\n    } catch (error) {\n      console.log(error.message);\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return error;\n    }\n  };\n\n  const searchBarRequestDrink = async (type, inputvalue) => {\n    try {\n      let response = '';\n\n      if (type === 'ingrediente') {\n        response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${inputvalue}`);\n      }\n\n      if (type === 'nome') {\n        response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${inputvalue}`);\n      }\n\n      if (type === 'primeira letra') {\n        if (inputvalue.length !== 1) {\n          return alert('Sua busca deve conter somente 1 (um) caracter');\n        }\n\n        response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?f=${inputvalue}`);\n      }\n\n      const responseJson = await response.json();\n\n      if (responseJson.drinks === null) {\n        throw new Error('Nao existem receitas');\n      }\n\n      setMeals(responseJson.drinks);\n    } catch (error) {\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return error;\n    }\n  };\n\n  const directRequestFood = async () => {\n    setIsDrinkLoading(true);\n    const response = await fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=');\n    const result = await response.json();\n    setMeals(result.meals);\n    setIsDrinkLoading(false);\n  };\n\n  const directRequestDrink = async () => {\n    setIsDrinkLoading(true);\n    const response = await fetch('https://www.thecocktaildb.com/api/json/v1/1/search.php?s=');\n    const result = await response.json();\n    setMeals(result.drinks);\n    setIsDrinkLoading(false);\n  };\n\n  const requestFoodCategory = async () => {\n    const response = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n    const result = await response.json();\n    setFoodCategory(result.meals);\n  };\n\n  const requestDrinkCategory = async () => {\n    const response = await fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list');\n    const result = await response.json();\n    setDrinkCategory(result.drinks);\n  };\n\n  useEffect(() => {\n    setShouldRedirect(true);\n  }, [meals]);\n  useEffect(() => {\n    requestDrinkCategory();\n    requestFoodCategory();\n  }, []);\n  const context = {\n    foodCategory,\n    drinkCategory,\n    directRequestFood,\n    isDrinkLoading,\n    setShouldRedirect,\n    directRequestDrink,\n    setSearchType,\n    searchType,\n    setSearchInputValue,\n    searchInputValue,\n    searchBarRequestDrink,\n    searchBarRequestFood,\n    meals,\n    shouldRedirect\n  };\n  return /*#__PURE__*/React.createElement(RecipeContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/home/douglas/Área de Trabalho/Trybe/trybe-exercises/Projetos/FrontEnd/sd-08-project-recipes-app/src/context/Provider.js"],"names":["React","useState","useEffect","PropTypes","RecipeContext","Provider","children","meals","setMeals","isDrinkLoading","setIsDrinkLoading","shouldRedirect","setShouldRedirect","foodCategory","setFoodCategory","drinkCategory","setDrinkCategory","searchType","setSearchType","searchInputValue","setSearchInputValue","searchBarRequestFood","type","inputvalue","response","fetch","length","alert","responseJson","json","console","log","Error","error","message","searchBarRequestDrink","drinks","directRequestFood","result","directRequestDrink","requestFoodCategory","requestDrinkCategory","context","propTypes","objectOf","any","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport RecipeContext from './RecipeContext';\n\nfunction Provider({ children }) {\n  const [meals, setMeals] = useState([]);\n  const [isDrinkLoading, setIsDrinkLoading] = useState(false);\n  const [shouldRedirect, setShouldRedirect] = useState(false);\n  const [foodCategory, setFoodCategory] = useState([]);\n  const [drinkCategory, setDrinkCategory] = useState([]);\n  const [searchType, setSearchType] = useState('ingrediente');\n  const [searchInputValue, setSearchInputValue] = useState('');\n\n  const searchBarRequestFood = async (type, inputvalue) => {\n    try {\n      let response = '';\n      if (type === 'ingrediente') {\n        response = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?i=${inputvalue}`);\n      }\n      if (type === 'nome') {\n        response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${inputvalue}`);\n      }\n      if (type === 'primeira letra') {\n        if (inputvalue.length !== 1) {\n          return alert('Sua busca deve conter somente 1 (um) caracter');\n        }\n        response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?f=${inputvalue}`);\n      }\n      const responseJson = await response.json();\n      console.log(responseJson);\n      if (responseJson.meals === null) {\n        throw new Error('Nao existem receitas');\n      }\n      setMeals(responseJson.meals);\n    } catch (error) {\n      console.log(error.message);\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return error;\n    }\n  };\n\n  const searchBarRequestDrink = async (type, inputvalue) => {\n    try {\n      let response = '';\n      if (type === 'ingrediente') {\n        response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${inputvalue}`);\n      }\n      if (type === 'nome') {\n        response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${inputvalue}`);\n      }\n      if (type === 'primeira letra') {\n        if (inputvalue.length !== 1) {\n          return alert('Sua busca deve conter somente 1 (um) caracter');\n        }\n        response = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?f=${inputvalue}`);\n      }\n      const responseJson = await response.json();\n      if (responseJson.drinks === null) {\n        throw new Error('Nao existem receitas');\n      }\n      setMeals(responseJson.drinks);\n    } catch (error) {\n      alert('Sinto muito, não encontramos nenhuma receita para esses filtros.');\n      return error;\n    }\n  };\n\n  const directRequestFood = async () => {\n    setIsDrinkLoading(true);\n    const response = await fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=');\n    const result = await response.json();\n    setMeals(result.meals);\n    setIsDrinkLoading(false);\n  };\n\n  const directRequestDrink = async () => {\n    setIsDrinkLoading(true);\n    const response = await fetch('https://www.thecocktaildb.com/api/json/v1/1/search.php?s=');\n    const result = await response.json();\n    setMeals(result.drinks);\n    setIsDrinkLoading(false);\n  };\n\n  const requestFoodCategory = async () => {\n    const response = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n    const result = await response.json();\n    setFoodCategory(result.meals);\n  };\n\n  const requestDrinkCategory = async () => {\n    const response = await fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list');\n    const result = await response.json();\n    setDrinkCategory(result.drinks);\n  };\n\n  useEffect(() => {\n    setShouldRedirect(true);\n  }, [meals]);\n\n  useEffect(() => {\n    requestDrinkCategory();\n    requestFoodCategory();\n  }, []);\n\n  const context = {\n    foodCategory,\n    drinkCategory,\n    directRequestFood,\n    isDrinkLoading,\n    setShouldRedirect,\n    directRequestDrink,\n    setSearchType,\n    searchType,\n    setSearchInputValue,\n    searchInputValue,\n    searchBarRequestDrink,\n    searchBarRequestFood,\n    meals,\n    shouldRedirect,\n  };\n\n  return (\n    <RecipeContext.Provider value={ context }>\n      {children}\n    </RecipeContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}